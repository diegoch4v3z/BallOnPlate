DVS
===

The DVS module provides an Nx SDK interface to Dynamic Vision Sensors.
This interface can take 3 main forms:

- A direct hardware interface from DAVIS240C to Kapoho Bay or Nahuku32
- A software interface from a pre-recorded .AEDAT file
- A software interface from manually specified x, y, p values

All three of the above interfaces are shown in **nxsdk_modules/dvs/tutorials**

Whether using a hardware or software interface, the spikes are delivered to a 
SNIP which handles the spike injection.
The default snip can be found at **nxsdk_modules/dvs/src/snips**. 
Custom snip examples are covered by the tutorial and can be 
found at **nxsdk_modules/dvs/tutorials/snips**.

The DVS module also provides an example of live spike visualization.
This feature uses spikeOutputPorts which are currently only supported on Kapoho Bay.
The visualizer code is found at **nxsdk_modules/dvs/tutorials/visualizer** and use
of the visualizer is covered by the dvs_live tutorial.

Direct Hardware Interface
-------------------------

The top PCB on Kapoho Bay (or connector card for Nahuku32) will pull events 
off the DAVIS sensor and deliver them to the SNIP.

A FIFO for buffering events sits between the DAVIS240C chip and the KapohoBay Lakemont. 
If this FIFO fills up, the buffered spikes will be dropped.
The default SNIP runs fast enough to inject DAVIS240C spikes without dropping any, 
but more complex custom SNIPs could result in the loss of spikes.

**Prerequisites:**

1. Kapoho Bay or a Nahuku32 board with DVS adapter card.
2. OS: Ubuntu 16.04 LTS (x86\_64)
3. Python 3.5.2
4. pip (latest)
5. DAVIS240C Camera (See https://inivation.com/support/hardware/davis240/ )
   for additional software/hardware instructions and FAQ)
6. Either libcaer https://inivation.com/support/software/libcaer/#ubuntu-linux or jAER https://github.com/SensorsINI/jaer

.. note::
    If you get error due to incorrect version of libcaer.so, please clone the correct version from
    https://github.com/inivation/libcaer/releases/tag/2.5.2 and follow instructions to build and install.

**Setup Instructions:**

1.  Follow NxSDK setup instructions to create the python virtual environment, install 
NxSDK, and verify that Loihi is working properly from your laptop.

2.  Follow instructions for cAER or jAER and verify that the DAVIS sensor is working correctly.

3.  Connect the DVS to Loihi using the data cable. The cable used for the connection 
is **SAMTEC FFSD-20-D-X-01-N** (where **X** is cable length). The image below shows the 
correct cable configuration.

.. figure:: _static/KBdvs.png
   :alt: Kapoho Bay with DVS attached


4.  Plug in the DVS USB Power cable to the laptop USB Port. Plug in KapohoBay to another USB Port.

5.  Enable DAVIS AER Interface:
  - jAER instructions (version 1.6.3):
    
    - launch jAERviewer and confirm that the DAVIS240C is detected
    - click the "HW configuration" button in the lower left
    - go to the "Multiplexer Config" tab and select "Mux.ForceChipBiasEnable"
    - go to the "DVS config" tab and select "DVS.ExternalAERControl"
    - also on the "DVS config" tab, deselect "DVS.Run"
  
  - cAER instructions:
    
    - cAER is available from https://gitlab.com/inivation/libcaer
    - Follow the instructions to build and run **examples/davis_enable_aer.cpp**

6. You should now be able to run the tutorial at **nxsdk_modules.dvs.tutorials.dvs_live** without error.


AEDAT Interface
---------------

The AEDAT interface allows the user to inject spikes from a pre-recorded DVS file created with jAER.
This functionality is useful for repeatedly testing a model with the exact same input data.

The spikes are delivered to the same SNIP as the direct hardware interface, so transitioning from
AEDAT file to the direct hardware interface should be seamless.

Manual Spike Interface
----------------------

The manual spike interface allows the user to explicitly state the x, y, p, t event values. 
This is useful for running simple tests on synthetic data to verify a network is operating 
correctly.

The manual spike interface uses the same SNIP as the AEDAT and Hardware interfaces so 
transitioning between interfaces should be seamless.
A spikeGen could be used in place of the Manual Spike Interface, but it would not make use 
of the DVS SNIPs.

DVS Python Module Documentation
-------------------------------

.. automodule:: nxsdk_modules.dvs.src.dvs
   :members: 
   :undoc-members:
