<head>
  <style>
    body {
      margin: 0;
    }
  </style>

  <script src="//unpkg.com/force-graph@1.18.0"></script>
  <!--<script src="../../dist/force-graph.js"></script>-->
</head>

<body>
  <div id="graph"></div>

  <script>

    const gData = {
      nodes: [
      {% for node in g.nodes %}
        { id: {{node.id}}, group: {{node.group}}, name: {{node.name}} },
      {% endfor %}
      ],
      links: [
      {% for edge in g.edges %}
        { source: {{edge.src}}, target: {{edge.dst}} },
       {% endfor %}
      ]}

    const NODE_R = 8;

    let highlightNodes = [];
    let highlightLinks = [];

    const elem = document.getElementById('graph');


    const Graph = ForceGraph()(elem)
      .graphData(gData)
      .nodeRelSize(NODE_R)
      .nodeId('id')
      .nodeAutoColorBy('group')
      .linkWidth(link => highlightLinks.indexOf(link) !== -1 ? 5 : 1)
      .linkDirectionalParticles(4)
      .linkDirectionalParticleWidth(link => highlightLinks.indexOf(link) !== -1 ? 4 : 0)
      .nodeCanvasObjectMode(node => highlightNodes.indexOf(node) !== -1 ? 'before' : undefined)
      .nodeCanvasObject((node, ctx, globalScale) => {

        ctx.beginPath();

        const label = node.name;
        ctx.font = `12px Sans-Serif`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillStyle = 'red';
        ctx.fillText(label, node.x, node.y + 20);

        // add ring just for highlighted nodes
        ctx.arc(node.x, node.y, NODE_R * 1.4, 0, 2 * Math.PI, false);
        ctx.fill();
      });

    function sleep(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
    }

    num_iteration = {{path_planning.num_steps}};
    node_buckets = [];
    {% for i in path_planning.node_buckets %}
       node_sub_bucket = [];
       {% for j in i %}
          node_sub_bucket.push({{j}});
       {% endfor %}
       node_buckets.push(node_sub_bucket);
    {% endfor %}   

    edge_buckets = [];
    {% for i in path_planning.edge_buckets %}
       edge_sub_bucket = [];
       {% for j in i %}
          edge_sub_bucket.push({{j}});
       {% endfor %}
       edge_buckets.push(edge_sub_bucket);
    {% endfor %}   

    async function demo() {
      await sleep(3000);
      nodes = Graph.graphData().nodes;
      links = Graph.graphData().links;
      // Sleep in loop
      for (let i = 0; i < num_iteration; i++) {
        console.log("In the loop", i);
        highlightNodes = [];
        highlightLinks = [];
        for (x in node_buckets[i]) {
          y = node_buckets[i][x]
          console.log(y);
          highlightNodes.push(nodes[y]);
        }
        console.log("===========");
        for (x in edge_buckets[i]) {
          y = edge_buckets[i][x];
          console.log(y);
          highlightLinks.push(links[y]);
        }

        Graph.refresh();
        await sleep(3000);
      }
    }

    demo();

  </script>
</body>
